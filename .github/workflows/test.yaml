name: "Test"

on: [push, pull_request, workflow_dispatch]

jobs:
  check:
    name: "Check"
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4

        # We check against the MSRV to ensure we're not using Rust features
        # from a later version of Rust. If you update the MSRV here, update the
        # Cargo.toml as well.
      - name: "Install MSRV toolchain"
        run: rustup toolchain install --profile minimal 1.75.0

      - name: "Set up Rust build cache"
        uses: Swatinem/rust-cache@v2

      - name: "Run cargo check --all-features"
        run: cargo check --all-features

      - name: "Run cargo check --no-default-features"
        run: cargo check --no-default-features

  # We don't fail on warnings when running tests because preventing unused
  # imports when running tests across multiple platforms is annoying.
  test:
    name: "Test"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4

      - name: "Install stable toolchain"
        run: rustup toolchain install --profile minimal stable

      - name: "Set up Rust build cache"
        uses: Swatinem/rust-cache@v2

        # The library bundles its own SQLite, but we still need to install the
        # SQLite CLI tool to run conformance tests against the reference sqlar
        # implementation.

      - name: "Validate SQLite CLI tool version"
        run: sqlite3 --version

        # This library's test suite runs quite quickly, so it's worth just
        # running all of them so we can see all test failures. Especially since
        # this library is developed on a Linux machine and only tested on
        # Windows and macOS in CI.

        # TODO: We don't run the conformance tests against the sqlar reference
        # implementation on macOS because, for whatever reason, it doesn't
        # support the `-A` flag. Maybe the version we install through Homebrew
        # is compiled without that functionality?
      - name: "Run cargo test --all-features"
        if: ${{ runner.os == 'macOS' }}
        run: cargo test --no-fail-fast

      - name: "Run cargo test --all-features"
        if: ${{ runner.os != 'macOS' }}
        run: cargo test --features "reference-conformance-tests" --no-fail-fast

  lints:
    name: "Lint"
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4

      - name: "Install stable toolchain"
        run: rustup toolchain install --profile minimal --component rustfmt clippy -- stable

      - name: "Set up Rust build cache"
        uses: Swatinem/rust-cache@v2

      - name: "Run cargo fmt"
        run: cargo fmt --all -- --check

      - name: "Run cargo clippy"
        run: cargo clippy --all-features

  docs:
    name: "Docs"
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: "-D warnings"
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4

      - name: "Install stable toolchain"
        run: rustup toolchain install --profile minimal stable

      - name: "Set up Rust build cache"
        uses: Swatinem/rust-cache@v2

      - name: "Run cargo doc"
        run: cargo doc --all-features --no-deps
